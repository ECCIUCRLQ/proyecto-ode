/* Generated by dmlc, do not edit! */

#ifndef ODECAM_PCI_DEVICE_DML_H
#define ODECAM_PCI_DEVICE_DML_H

#define DML_PREFIX(x) odecam_pci_device_##x

#define DMLDIR_IO_MEMORY_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/io-memory.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/io-memory.dml"

#include <simics/devs/io-memory.h>

#undef DMLDIR_IO_MEMORY_H

#define DMLDIR_INSTRUMENTATION_PROVIDER_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/instrumentation-provider.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/instrumentation-provider.dml"

#include <simics/model-iface/instrumentation-provider.h>

#undef DMLDIR_INSTRUMENTATION_PROVIDER_H

#define DMLDIR_BANK_INSTRUMENTATION_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/bank-instrumentation.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/bank-instrumentation.dml"

#include <simics/model-iface/bank-instrumentation.h>

#undef DMLDIR_BANK_INSTRUMENTATION_H

#define DMLDIR_INT_REGISTER_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/int-register.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/int-register.dml"

#include <simics/model-iface/int-register.h>

#undef DMLDIR_INT_REGISTER_H

#define DMLDIR_REGISTER_VIEW_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/register-view.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/register-view.dml"

#include <simics/model-iface/register-view.h>

#undef DMLDIR_REGISTER_VIEW_H

#define DMLDIR_REGISTER_VIEW_READ_ONLY_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/register-view-read-only.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/register-view-read-only.dml"

#include <simics/model-iface/register-view-read-only.h>

#undef DMLDIR_REGISTER_VIEW_READ_ONLY_H

#define DMLDIR_HASHTAB_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/hashtab.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/hashtab.dml"

#include <simics/util/hashtab.h>

#undef DMLDIR_HASHTAB_H

#define DMLDIR_PYTHON_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/simulator/python.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/simulator/python.dml"

#include <simics/simulator/python.h>

#undef DMLDIR_PYTHON_H

#define DMLDIR_DML_BUILTINS_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/1.4/dml-builtins.h"
#line 12 "/home/david/simics/simics-6.0.128/linux64/bin/dml/1.4/dml-builtins.dml"

    #include <simics/dmllib.h>

#undef DMLDIR_DML_BUILTINS_H

#define DMLDIR_BUILD_ID_6_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/build-id-6.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/build-id-6.dml"

#include <simics/build-id-6.h>

#undef DMLDIR_BUILD_ID_6_H

#define DMLDIR_BUILD_ID_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/build-id.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/build-id.dml"

#include <simics/build-id.h>

#undef DMLDIR_BUILD_ID_H

#define DMLDIR_DBUFFER_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/dbuffer.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/dbuffer.dml"

#include <simics/util/dbuffer.h>

#undef DMLDIR_DBUFFER_H

#define DMLDIR_SWABBER_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/swabber.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/swabber.dml"

#include <simics/util/swabber.h>

#undef DMLDIR_SWABBER_H

#define DMLDIR_FRAGS_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/frags.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/frags.dml"

#include <simics/util/frags.h>

#undef DMLDIR_FRAGS_H

#define DMLDIR_CALLBACKS_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/callbacks.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/callbacks.dml"

#include <simics/base/callbacks.h>

#undef DMLDIR_CALLBACKS_H

#define DMLDIR_ARITH_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/arith.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/arith.dml"

#include <simics/util/arith.h>

#undef DMLDIR_ARITH_H

#define DMLDIR_INT128_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/int128.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/int128.dml"

#include <simics/util/int128.h>

#undef DMLDIR_INT128_H

#define DMLDIR_DURATION_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/duration.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/duration.dml"

#include <simics/base/duration.h>

#undef DMLDIR_DURATION_H

#define DMLDIR_BIGTIME_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/bigtime.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/bigtime.dml"

#include <simics/base/bigtime.h>

#undef DMLDIR_BIGTIME_H

#define DMLDIR_LOCAL_TIME_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/local-time.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/local-time.dml"

#include <simics/base/local-time.h>

#undef DMLDIR_LOCAL_TIME_H

#define DMLDIR_CYCLE_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/cycle.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/cycle.dml"

#include <simics/model-iface/cycle.h>

#undef DMLDIR_CYCLE_H

#define DMLDIR_CLOCK_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/clock.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/clock.dml"

#include <simics/base/clock.h>

#undef DMLDIR_CLOCK_H

#define DMLDIR_LOG_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/log.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/log.dml"

#include <simics/base/log.h>

#undef DMLDIR_LOG_H

#define DMLDIR_CONFIGURATION_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/configuration.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/configuration.dml"

#include <simics/base/configuration.h>

#undef DMLDIR_CONFIGURATION_H

#define DMLDIR_EVENT_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/event.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/event.dml"

#include <simics/base/event.h>

#undef DMLDIR_EVENT_H

#define DMLDIR_GLOBAL_NOTIFIER_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/global-notifier.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/global-notifier.dml"

#include <simics/base/global-notifier.h>

#undef DMLDIR_GLOBAL_NOTIFIER_H

#define DMLDIR_HAP_PRODUCER_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/hap-producer.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/hap-producer.dml"

#include <simics/base/hap-producer.h>

#undef DMLDIR_HAP_PRODUCER_H

#define DMLDIR_NOTIFIER_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/notifier.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/notifier.dml"

#include <simics/base/notifier.h>

#undef DMLDIR_NOTIFIER_H

#define DMLDIR_OBJECT_LOCKS_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/object-locks.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/object-locks.dml"

#include <simics/base/object-locks.h>

#undef DMLDIR_OBJECT_LOCKS_H

#define DMLDIR_SIM_EXCEPTION_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/sim-exception.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/sim-exception.dml"

#include <simics/base/sim-exception.h>

#undef DMLDIR_SIM_EXCEPTION_H

#define DMLDIR_4_8_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/obsolete/4_8.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/obsolete/4_8.dml"

#include <simics/obsolete/4_8.h>

#undef DMLDIR_4_8_H

#define DMLDIR_EMBED_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/simulator/embed.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/simulator/embed.dml"

#include <simics/simulator/embed.h>

#undef DMLDIR_EMBED_H

#define DMLDIR_5_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/obsolete/5.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/obsolete/5.dml"

#include <simics/obsolete/5.h>

#undef DMLDIR_5_H

#define DMLDIR_DEVICE_API_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/device-api.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/device-api.dml"

#include <simics/device-api.h>

#undef DMLDIR_DEVICE_API_H

#define DMLDIR_SIGNAL_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/signal.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/signal.dml"

#include <simics/devs/signal.h>

#undef DMLDIR_SIGNAL_H

#define DMLDIR_CBDATA_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/cbdata.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/cbdata.dml"

#include <simics/base/cbdata.h>

#undef DMLDIR_CBDATA_H

#define DMLDIR_TRANSLATOR_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/translator.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/translator.dml"

#include <simics/devs/translator.h>

#undef DMLDIR_TRANSLATOR_H

#define DMLDIR_TRANSACTION_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/transaction.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/model-iface/transaction.dml"

#include <simics/model-iface/transaction.h>

#undef DMLDIR_TRANSACTION_H

#define DMLDIR_TYPES_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/processor/types.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/processor/types.dml"

#include <simics/processor/types.h>

#undef DMLDIR_TYPES_H

#define DMLDIR_DIRECT_MEMORY_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/direct-memory.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/direct-memory.dml"

#include <simics/base/direct-memory.h>

#undef DMLDIR_DIRECT_MEMORY_H

#define DMLDIR_MAP_TARGET_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/map-target.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/map-target.dml"

#include <simics/base/map-target.h>

#undef DMLDIR_MAP_TARGET_H

#define DMLDIR_TRANSACTION_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/transaction.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/transaction.dml"

#include <simics/base/transaction.h>

#undef DMLDIR_TRANSACTION_H

#define DMLDIR_PCI_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/pci.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/pci.dml"

#include <simics/devs/pci.h>

#undef DMLDIR_PCI_H

#define DMLDIR_MAP_DEMAP_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/map-demap.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/map-demap.dml"

#include <simics/devs/map-demap.h>

#undef DMLDIR_MAP_DEMAP_H

#define DMLDIR_MEMORY_TRANSACTION_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/memory-transaction.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/memory-transaction.dml"

#include <simics/base/memory-transaction.h>

#undef DMLDIR_MEMORY_TRANSACTION_H

#define DMLDIR_SOBJECT_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/sobject.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/sobject.dml"

#include <simics/base/sobject.h>

#undef DMLDIR_SOBJECT_H

#define DMLDIR_VERSION_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/version.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/version.dml"

#include <simics/base/version.h>

#undef DMLDIR_VERSION_H

#define DMLDIR_ATTR_VALUE_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/attr-value.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/attr-value.dml"

#include <simics/base/attr-value.h>

#undef DMLDIR_ATTR_VALUE_H

#define DMLDIR_ALLOC_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/alloc.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/alloc.dml"

#include <simics/util/alloc.h>

#undef DMLDIR_ALLOC_H

#define DMLDIR_STRBUF_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/strbuf.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/strbuf.dml"

#include <simics/util/strbuf.h>

#undef DMLDIR_STRBUF_H

#define DMLDIR_HELP_MACROS_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/help-macros.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/help-macros.dml"

#include <simics/util/help-macros.h>

#undef DMLDIR_HELP_MACROS_H

#define DMLDIR_VECT_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/vect.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/vect.dml"

#include <simics/util/vect.h>

#undef DMLDIR_VECT_H

#define DMLDIR_CONF_OBJECT_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/conf-object.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/conf-object.dml"

#include <simics/base/conf-object.h>

#undef DMLDIR_CONF_OBJECT_H

#define DMLDIR_TIME_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/time.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/time.dml"

#include <simics/base/time.h>

#undef DMLDIR_TIME_H

#define DMLDIR_MEMORY_SPACE_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/memory-space.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/memory-space.dml"

#include <simics/devs/memory-space.h>

#undef DMLDIR_MEMORY_SPACE_H

#define DMLDIR_PYWRAP_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/pywrap.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/pywrap.dml"

#include <simics/pywrap.h>

#undef DMLDIR_PYWRAP_H

#define DMLDIR_RAM_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/ram.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/devs/ram.dml"

#include <simics/devs/ram.h>

#undef DMLDIR_RAM_H

#define DMLDIR_BITCOUNT_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/bitcount.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/util/bitcount.dml"

#include <simics/util/bitcount.h>

#undef DMLDIR_BITCOUNT_H

#define DMLDIR_MODULE_HOST_CONFIG_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/module-host-config.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/module-host-config.dml"

#include <simics/module-host-config.h>

#undef DMLDIR_MODULE_HOST_CONFIG_H

#define DMLDIR_HOST_INFO_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/host-info.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/host-info.dml"

#include <simics/host-info.h>

#undef DMLDIR_HOST_INFO_H

#define DMLDIR_BASE_TYPES_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base-types.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base-types.dml"

#include <simics/base-types.h>

#undef DMLDIR_BASE_TYPES_H

#define DMLDIR_TYPES_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/types.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/types.dml"

#include <simics/base/types.h>

#undef DMLDIR_TYPES_H

#define DMLDIR_MEMORY_H "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/memory.h"
#line 9 "/home/david/simics/simics-6.0.128/linux64/bin/dml/api/6/1.4/simics/base/memory.dml"

#include <simics/base/memory.h>

#undef DMLDIR_MEMORY_H

#define DMLDIR_COMMON_H "/home/david/simics/simics-6.0.128/src/devices/dml-lib/1.4/pci/common.h"
#line 24 "/home/david/simics/simics-6.0.128/src/devices/dml-lib/1.4/pci/common.dml"

    static const char *const irq_pin_name[] = {
        "INT#A",
        "INT#B",
        "INT#C",
        "INT#D"
    };

    #include <simics/util/bitcount.h>
    #define convert_le64 CONVERT_LE64

#undef DMLDIR_COMMON_H

#define DMLDIR_ODECAM_PCI_DEVICE_H "/home/david/Desktop/repos/proyecto-ode/src/ODEcam/modules/odecam-pci-device/odecam-pci-device.h"
#line 30 "/home/david/Desktop/repos/proyecto-ode/src/ODEcam/modules/odecam-pci-device/odecam-pci-device.dml"

	#include <stdio.h>
	#include <stdlib.h>

#undef DMLDIR_ODECAM_PCI_DEVICE_H

#line 473 "odecam-pci-device-dml.h"

#include "odecam-pci-device-dml-struct.h"

typedef _traitref_t post_init;
typedef _traitref_t init;
typedef _traitref_t limitations;
typedef _traitref_t name;
typedef _traitref_t documentation;
typedef _traitref_t desc;
typedef _traitref_t object;
typedef _traitref_t device;
typedef _traitref_t write_register;
typedef _traitref_t shown_desc;
typedef _traitref_t init_val;
typedef _traitref_t _conf_attribute;
typedef _traitref_t _qname;
typedef _traitref_t _bitsize;
typedef _traitref_t read_register;
typedef _traitref_t set_val;
typedef _traitref_t _set;
typedef _traitref_t set;
typedef _traitref_t get_val;
typedef _traitref_t _get;
typedef _traitref_t get;
typedef _traitref_t _register;
typedef _traitref_t write_field;
typedef _traitref_t ignore_write;
typedef _traitref_t power_on_reset;
typedef _traitref_t _hard_reset;
typedef _traitref_t _soft_reset;
typedef _traitref_t no_reset;
typedef _traitref_t silent_constant;
typedef _traitref_t _lsb;
typedef _traitref_t field;
typedef _traitref_t map_params;
typedef _traitref_t _no_base_address;
typedef _traitref_t no_base_address_32;
typedef _traitref_t _simple_write;
typedef _traitref_t write_1_clears;
typedef _traitref_t base_address;
typedef _traitref_t _pci_config_generic_command_reg;
typedef _traitref_t __write;
typedef _traitref_t read_only_custom_write;
typedef _traitref_t read_field;
typedef _traitref_t read_zero;
typedef _traitref_t _reg_or_field;
typedef _traitref_t constant;
typedef _traitref_t unmapped;
typedef _traitref_t implement;
typedef _traitref_t bank_io_memory;
typedef _traitref_t bank_transaction;
typedef _traitref_t bank;
typedef _traitref_t rbar_capable_bank;
typedef _traitref_t __read;
typedef _traitref_t miss_pattern_bank;
typedef _traitref_t _pci_config_generic;
typedef _traitref_t function_mapped_bank;
typedef _traitref_t pci_config_generic;
typedef _traitref_t _pci_config_type_0;
typedef _traitref_t pci_config_type_0;
typedef _traitref_t attribute;
typedef _traitref_t interface;
typedef _traitref_t _connect;
typedef _traitref_t uint64_attr;
typedef _traitref_t providing_expansion_rom_connect;
typedef _traitref_t pci_device_params;
typedef _traitref_t providing_legacy_interrupts;
typedef _traitref_t pseudo_attr;
typedef _traitref_t read_only_attr;
typedef _traitref_t pci_bus_connect;
typedef _traitref_t _maybe_provides_pci_bus_connect;
typedef _traitref_t provides_pci_bus_connect;
typedef _traitref_t providing_pci_bus_connect;
typedef _traitref_t providing_pci_device_interface;
typedef _traitref_t providing_dma_methods;
typedef _traitref_t pci_common;
typedef _traitref_t pci_device;
typedef _traitref_t read_only;
typedef _traitref_t _reg_write_as_field;
typedef _traitref_t _reg_read_as_field;
typedef _traitref_t _get_field;
typedef _traitref_t _set_field;
typedef _traitref_t _read_field;
typedef _traitref_t _write_field;
typedef _traitref_t _init_val_soft_reset;
typedef _traitref_t port;
typedef _traitref_t sreset;
typedef _traitref_t _init_val_hard_reset;
typedef _traitref_t hreset;
typedef _traitref_t function_io_memory;
typedef _traitref_t memory_base_address_generic;
typedef _traitref_t memory_base_address_32;
typedef _traitref_t pcie_device;
typedef _traitref_t pci_mf_device;
typedef _traitref_t pci_config_type_0_mf;
typedef _traitref_t pci_config_type_1;
typedef _traitref_t memory_base_address_64;
typedef _traitref_t io_base_address;
typedef _traitref_t no_base_address_64;
typedef _traitref_t defining_empty_pcie_extended_conf_space;
typedef _traitref_t providing_pcie_message_port;
typedef _traitref_t providing_pcie_upstream_port;
typedef _traitref_t providing_pcie_downstream_connect;
typedef _traitref_t _defining_pcie_capability_devices_common;
typedef _traitref_t _defining_pcie_capability_devices_2_v2;
typedef _traitref_t defining_pcie_capability_devices_v1;
typedef _traitref_t defining_pcie_capability_devices_v2;
typedef _traitref_t defining_pcie_capability_devices_v21;
typedef _traitref_t defining_pcie_capability_devices_v3;
typedef _traitref_t defining_pcie_capability_devices_v31;
typedef _traitref_t defining_pcie_capability_devices_v4;
typedef _traitref_t defining_pcie_capability_devices_v5;
typedef _traitref_t _defining_pcie_capability_links_common;
typedef _traitref_t _defining_pcie_capability_links_2_common;
typedef _traitref_t _defining_pcie_capability_links_v2;
typedef _traitref_t defining_pcie_capability_links_2_v2;
typedef _traitref_t defining_pcie_capability_links_2_v3;
typedef _traitref_t defining_pcie_capability_links_2_v31;
typedef _traitref_t defining_pcie_capability_links_2_v4;
typedef _traitref_t defining_pcie_capability_links_2_v5;
typedef _traitref_t defining_pcie_capability_links_v1;
typedef _traitref_t defining_pcie_capability_links_v2;
typedef _traitref_t defining_pcie_capability_links_v3;
typedef _traitref_t defining_pcie_capability_links_v31;
typedef _traitref_t defining_pcie_capability_links_v4;
typedef _traitref_t defining_pcie_capability_links_v5;
typedef _traitref_t _defining_pcie_capability_slots_common;
typedef _traitref_t _defining_pcie_capability_slots_v2;
typedef _traitref_t _defining_pcie_capability_slots_v3;
typedef _traitref_t defining_pcie_capability_slots_2_v2;
typedef _traitref_t defining_pcie_capability_slots_2_v3;
typedef _traitref_t defining_pcie_capability_slots_2_v4;
typedef _traitref_t defining_pcie_capability_slots_2_v5;
typedef _traitref_t defining_pcie_capability_slots_v1;
typedef _traitref_t defining_pcie_capability_slots_v2;
typedef _traitref_t defining_pcie_capability_slots_v3;
typedef _traitref_t defining_pcie_capability_slots_v31;
typedef _traitref_t defining_pcie_capability_slots_v4;
typedef _traitref_t defining_pcie_capability_slots_v5;
typedef _traitref_t _defining_pcie_capability_root_ports_common;
typedef _traitref_t _defining_pcie_capability_root_ports_v2;
typedef _traitref_t _defining_pcie_capability_root_ports_v3;
typedef _traitref_t _defining_pcie_capability_root_ports_v4;
typedef _traitref_t _defining_pcie_capability_root_ports_v5;
typedef _traitref_t defining_pcie_capability_root_ports_v1;
typedef _traitref_t defining_pcie_capability_root_ports_v2;
typedef _traitref_t defining_pcie_capability_root_ports_v3;
typedef _traitref_t defining_pcie_capability_root_ports_v4;
typedef _traitref_t defining_pcie_capability_root_ports_v5;
typedef _traitref_t defining_pcie_capability_v1;
typedef _traitref_t defining_pcie_capability_v2;
typedef _traitref_t defining_pcie_capability_v3;
typedef _traitref_t sticky;
typedef _traitref_t _defining_pcie_aer_capability_common;
typedef _traitref_t defining_pcie_aer_capability_v1;
typedef _traitref_t defining_pcie_aer_capability_v2;
typedef _traitref_t defining_pcie_aer_capability_v21;
typedef _traitref_t defining_pcie_aer_capability_v3;
typedef _traitref_t defining_pcie_aer_capability_v4;
typedef _traitref_t defining_pcie_aer_capability_v5;
typedef _traitref_t _defining_pcie_vc_capability_common;
typedef _traitref_t defining_pcie_vc_capability_v1;
typedef _traitref_t defining_pcie_vc_capability_v2;
typedef _traitref_t defining_pcie_vc_capability_v3;
typedef _traitref_t defining_pcie_vc_capability_v4;
typedef _traitref_t defining_pcie_vc_capability_v5;
typedef _traitref_t defining_pcie_dsn_capability_v1;
typedef _traitref_t defining_pcie_dsn_capability_v2;
typedef _traitref_t defining_pcie_dsn_capability_v3;
typedef _traitref_t defining_pcie_dsn_capability_v4;
typedef _traitref_t defining_pcie_dsn_capability_v5;
typedef _traitref_t _defining_pcie_rcld_capability_common;
typedef _traitref_t defining_pcie_rcld_capability_v2;
typedef _traitref_t defining_pcie_rcld_capability_v3;
typedef _traitref_t defining_pcie_rcld_capability_v4;
typedef _traitref_t defining_pcie_rcld_capability_v5;
typedef _traitref_t _defining_pcie_rcilc_capability_common;
typedef _traitref_t defining_pcie_rcilc_capability_v2;
typedef _traitref_t defining_pcie_rcilc_capability_v3;
typedef _traitref_t defining_pcie_rcilc_capability_v4;
typedef _traitref_t defining_pcie_rcilc_capability_v5;
typedef _traitref_t defining_pcie_dpb_capability_v1;
typedef _traitref_t defining_pcie_dpb_capability_v2;
typedef _traitref_t defining_pcie_dpb_capability_v3;
typedef _traitref_t defining_pcie_dpb_capability_v4;
typedef _traitref_t defining_pcie_dpb_capability_v5;
typedef _traitref_t defining_pcie_acs_capability_v2;
typedef _traitref_t defining_pcie_acs_capability_v3;
typedef _traitref_t defining_pcie_acs_capability_v4;
typedef _traitref_t defining_pcie_acs_capability_v5;
typedef _traitref_t _defining_pcie_rcecea_capability_common;
typedef _traitref_t defining_pcie_rcecea_capability_v2;
typedef _traitref_t defining_pcie_rcecea_capability_v3;
typedef _traitref_t defining_pcie_rcecea_capability_v4;
typedef _traitref_t defining_pcie_rcecea_capability_v5;
typedef _traitref_t _defining_pcie_mfvc_capability_common;
typedef _traitref_t defining_pcie_mfvc_capability_v2;
typedef _traitref_t defining_pcie_mfvc_capability_v3;
typedef _traitref_t defining_pcie_mfvc_capability_v4;
typedef _traitref_t defining_pcie_mfvc_capability_v5;
typedef _traitref_t _defining_pcie_vsec_capability_common;
typedef _traitref_t defining_pcie_vsec_capability_v2;
typedef _traitref_t defining_pcie_vsec_capability_v3;
typedef _traitref_t defining_pcie_vsec_capability_v4;
typedef _traitref_t defining_pcie_vsec_capability_v5;
typedef _traitref_t _defining_pcie_rcrb_capability_common;
typedef _traitref_t defining_pcie_rcrb_capability_v2;
typedef _traitref_t defining_pcie_rcrb_capability_v3;
typedef _traitref_t defining_pcie_rcrb_capability_v4;
typedef _traitref_t defining_pcie_rcrb_capability_v5;
typedef _traitref_t defining_pcie_mc_capability_v21;
typedef _traitref_t defining_pcie_mc_capability_v3;
typedef _traitref_t defining_pcie_mc_capability_v4;
typedef _traitref_t defining_pcie_mc_capability_v5;
typedef _traitref_t rbar_control_reg;
typedef _traitref_t defining_pcie_rbar_capability_v21;
typedef _traitref_t resizable_bar;
typedef _traitref_t defining_pcie_rbar_capability_v3;
typedef _traitref_t defining_pcie_rbar_capability_v4;
typedef _traitref_t defining_pcie_rbar_capability_v5;
typedef _traitref_t defining_pcie_ari_capability_v21;
typedef _traitref_t defining_pcie_ari_capability_v3;
typedef _traitref_t defining_pcie_ari_capability_v4;
typedef _traitref_t defining_pcie_ari_capability_v5;
typedef _traitref_t defining_pcie_dpa_capability_v21;
typedef _traitref_t defining_pcie_dpa_capability_v3;
typedef _traitref_t defining_pcie_dpa_capability_v4;
typedef _traitref_t defining_pcie_dpa_capability_v5;
typedef _traitref_t defining_pcie_ltr_capability_v21;
typedef _traitref_t defining_pcie_ltr_capability_v3;
typedef _traitref_t defining_pcie_ltr_capability_v4;
typedef _traitref_t defining_pcie_ltr_capability_v5;
typedef _traitref_t defining_pcie_tph_capability_v21;
typedef _traitref_t defining_pcie_tph_capability_v3;
typedef _traitref_t defining_pcie_tph_capability_v4;
typedef _traitref_t defining_pcie_tph_capability_v5;
typedef _traitref_t defining_pcie_spe_capability_v3;
typedef _traitref_t defining_pcie_spe_capability_v4;
typedef _traitref_t defining_pcie_spe_capability_v5;
typedef _traitref_t defining_pcie_mpcie_capability_v31;
typedef _traitref_t defining_pcie_mpcie_capability_v4;
typedef _traitref_t defining_pcie_mpcie_capability_v5;
typedef _traitref_t defining_pcie_pasid_capability_v31;
typedef _traitref_t defining_pcie_pasid_capability_v4;
typedef _traitref_t defining_pcie_pasid_capability_v5;
typedef _traitref_t defining_pcie_lnr_capability_v31;
typedef _traitref_t defining_pcie_lnr_capability_v4;
typedef _traitref_t defining_pcie_lnr_capability_v5;
typedef _traitref_t defining_pcie_dpc_capability_v31;
typedef _traitref_t defining_pcie_dpc_capability_v4;
typedef _traitref_t defining_pcie_dpc_capability_v5;
typedef _traitref_t defining_pcie_ptm_capability_v31;
typedef _traitref_t defining_pcie_ptm_capability_v4;
typedef _traitref_t defining_pcie_ptm_capability_v5;
typedef _traitref_t defining_pcie_l1pms_capability_v31;
typedef _traitref_t defining_pcie_l1pms_capability_v4;
typedef _traitref_t defining_pcie_l1pms_capability_v5;
typedef _traitref_t defining_pcie_frsq_capability_v31;
typedef _traitref_t defining_pcie_frsq_capability_v4;
typedef _traitref_t defining_pcie_frsq_capability_v5;
typedef _traitref_t defining_pcie_rtr_capability_v31;
typedef _traitref_t defining_pcie_rtr_capability_v4;
typedef _traitref_t defining_pcie_rtr_capability_v5;
typedef _traitref_t defining_pcie_dlf_capability_v4;
typedef _traitref_t defining_pcie_dlf_capability_v5;
typedef _traitref_t defining_pcie_pl16g_capability_v4;
typedef _traitref_t defining_pcie_pl16g_capability_v5;
typedef _traitref_t defining_pcie_pl32g_capability_v5;
typedef _traitref_t defining_pcie_lmar_capability_v4;
typedef _traitref_t defining_pcie_lmar_capability_v5;
typedef _traitref_t defining_pcie_ea_capability_v4;
typedef _traitref_t defining_pcie_ea_capability_v5;
typedef _traitref_t defining_pcie_fpb_capability_v4;
typedef _traitref_t defining_pcie_fpb_capability_v5;
typedef _traitref_t defining_pcie_dvsec_capability_v4;
typedef _traitref_t defining_pcie_dvsec_capability_v5;
typedef _traitref_t defining_pcie_hid_capability_v4;
typedef _traitref_t defining_pcie_hid_capability_v5;
typedef _traitref_t defining_pcie_vpd_capability_v4;
typedef _traitref_t defining_pcie_vpd_capability_v5;
typedef _traitref_t defining_pcie_npem_capability_v4;
typedef _traitref_t defining_pcie_npem_capability_v5;
typedef _traitref_t defining_pcie_ap_capability_v5;
typedef _traitref_t defining_pcie_af_capability_v5;
typedef _traitref_t defining_pcie_sfi_capability_v5;
typedef _traitref_t defining_pcie_ssid_capability_v5;
typedef _traitref_t providing_pcie_ats_methods;
typedef _traitref_t defining_pcie_ats_capability;
typedef _traitref_t providing_pcie_prs_methods;
typedef _traitref_t defining_pcie_prs_capability;
typedef _traitref_t dml12_compat_io_memory_access;
typedef _traitref_t dml12_compat_read_register;
typedef _traitref_t dml12_compat_write_register;
typedef _traitref_t dml12_compat_read_field;
typedef _traitref_t dml12_compat_write_field;
typedef _traitref_t defining_pcie_capability_slots_2_v31;
typedef _traitref_t defining_pcie_capability_root_ports_v31;
typedef _traitref_t defining_pcie_aer_capability_v31;
typedef _traitref_t defining_pcie_vc_capability_v31;
typedef _traitref_t defining_pcie_dsn_capability_v31;
typedef _traitref_t defining_pcie_rcld_capability_v31;
typedef _traitref_t defining_pcie_rcilc_capability_v31;
typedef _traitref_t defining_pcie_dpb_capability_v31;
typedef _traitref_t defining_pcie_acs_capability_v31;
typedef _traitref_t defining_pcie_rcecea_capability_v31;
typedef _traitref_t defining_pcie_mfvc_capability_v31;
typedef _traitref_t defining_pcie_vsec_capability_v31;
typedef _traitref_t defining_pcie_rcrb_capability_v31;
typedef _traitref_t defining_pcie_mc_capability_v31;
typedef _traitref_t defining_pcie_rbar_capability_v31;
typedef _traitref_t defining_pcie_ari_capability_v31;
typedef _traitref_t defining_pcie_dpa_capability_v31;
typedef _traitref_t defining_pcie_ltr_capability_v31;
typedef _traitref_t defining_pcie_tph_capability_v31;
typedef _traitref_t defining_pcie_spe_capability_v31;
typedef _traitref_t defining_pcie_capability_links_v21;
typedef _traitref_t defining_pcie_capability_slots_v21;
typedef _traitref_t defining_pcie_capability_root_ports_v21;
typedef _traitref_t defining_pcie_capability_v21;
typedef _traitref_t defining_pcie_capability_links_2_v21;
typedef _traitref_t defining_pcie_capability_slots_2_v21;
typedef _traitref_t defining_pcie_vc_capability_v21;
typedef _traitref_t defining_pcie_dsn_capability_v21;
typedef _traitref_t defining_pcie_rcld_capability_v21;
typedef _traitref_t defining_pcie_rcilc_capability_v21;
typedef _traitref_t defining_pcie_dpb_capability_v21;
typedef _traitref_t defining_pcie_acs_capability_v21;
typedef _traitref_t defining_pcie_rcecea_capability_v21;
typedef _traitref_t defining_pcie_mfvc_capability_v21;
typedef _traitref_t defining_pcie_vsec_capability_v21;
typedef _traitref_t defining_pcie_rcrb_capability_v21;
typedef _traitref_t _defining_pci_msi_capability_common;
typedef _traitref_t _defining_pci_pvm_capability_common;
typedef _traitref_t defining_pci_msi_capability;
typedef _traitref_t defining_pci_msi64_capability;
typedef _traitref_t defining_pci_msi_pvm_capability;
typedef _traitref_t defining_pci_msi64_pvm_capability;
typedef _traitref_t defining_pci_msix_capability;
typedef _traitref_t num_of_vectors;
typedef _traitref_t msix_table_bank;
typedef _traitref_t _pending_bits;
typedef _traitref_t msix_table_bank_with_pba;
typedef _traitref_t msix_pba_bank;
typedef _traitref_t providing_msix_interrupts;
typedef _traitref_t defining_pci_pcix_capability;
typedef _traitref_t defining_pci_pm_capability;
typedef _traitref_t _init_val_power_on_reset;
typedef _traitref_t poreset;
typedef _traitref_t soft_reset_val;
typedef _traitref_t write_only;
typedef _traitref_t clear_on_read;
typedef _traitref_t write_1_only;
typedef _traitref_t write_0_only;
typedef _traitref_t read_constant;
typedef _traitref_t zeros;
typedef _traitref_t ones;
typedef _traitref_t ignore;
typedef _traitref_t reserved;
typedef _traitref_t _log_unimpl_read;
typedef _traitref_t _log_unimpl_write;
typedef _traitref_t unimpl;
typedef _traitref_t read_unimpl;
typedef _traitref_t write_unimpl;
typedef _traitref_t silent_unimpl;
typedef _traitref_t undocumented;
typedef _traitref_t design_limitation;
typedef _traitref_t bank_obj;
typedef _traitref_t map_target;
typedef _traitref_t group;
typedef _traitref_t bool_attr;
typedef _traitref_t int64_attr;
typedef _traitref_t double_attr;
typedef _traitref_t write_only_attr;
typedef _traitref_t init_as_subobj;
typedef _traitref_t subdevice;
typedef _traitref_t event;
typedef _traitref_t _event;
typedef _traitref_t _time_event;
typedef _traitref_t _cycle_event;
typedef _traitref_t _simple_event;
typedef _traitref_t simple_time_event;
typedef _traitref_t simple_cycle_event;
typedef _traitref_t _custom_event;
typedef _traitref_t custom_time_event;
typedef _traitref_t custom_cycle_event;
typedef _traitref_t _uint64_event;
typedef _traitref_t uint64_time_event;
typedef _traitref_t uint64_cycle_event;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset__memory_base_address_32;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___read_field___write_field__field__read__write;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___write_field__field__ignore_write;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___set_field___write_field__field__ignore_write;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset__no_base_address_32;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___write_field__field__silent_constant;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___reg_read_as_field___reg_write_as_field__read_zero__write;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset__unmapped;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset__register;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___reg_write_as_field__constant;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___reg_write_as_field__read_only_custom_write;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset__field;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___write_field__field__write;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset__base_address;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___write_field__field__write_1_clears;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___reg_read_as_field__read;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___reg_write_as_field__write;
typedef _traitref_t __implicit__init_val_hard_reset___init_val_soft_reset___reg_write_as_field__read_only;


struct _post_init {
    _each_in_t _each_post_init;
    void  (*post_init)(odecam_pci_device_t *arg0, post_init arg1);
};
struct _init {
    _each_in_t _each_init;
    void  (*init)(odecam_pci_device_t *arg0, init arg1);
};
struct _limitations {
    uint8 _dummy;
};
struct _name {
    char const *name;
};
struct _documentation {
    uint8 _dummy;
};
struct _desc {
    uint8 _dummy;
};
struct _object {
    struct _desc desc;
    struct _documentation documentation;
    struct _limitations limitations;
    struct _name name;
};
struct _device {
    struct _init init;
    struct _object object;
    struct _post_init post_init;
};
struct _write_register {
    void  (*write_register)(odecam_pci_device_t *arg0, write_register arg1, uint64 arg2, uint64 arg3, void  *arg4);
};
struct _shown_desc {
    struct _desc desc;
    char const *shown_desc;
};
struct _init_val {
    struct _init init;
    uint64 init_val;
    void  (*_default_init)(odecam_pci_device_t *arg0, init_val arg1);
};
struct __conf_attribute {
    struct _object object;
};
struct __qname {
    char const *(*_qname)(odecam_pci_device_t *arg0, _qname arg1);
};
struct __bitsize {
    uint8 bitsize;
};
struct _read_register {
    uint64 (*read_register)(odecam_pci_device_t *arg0, read_register arg1, uint64 arg2, void  *arg3);
};
struct _set_val {
    void  (*set_val)(odecam_pci_device_t *arg0, set_val arg1, uint64 arg2);
    void  (*_default_set)(odecam_pci_device_t *arg0, set_val arg1, uint64 arg2);
};
struct __set {
    struct _set_val set_val;
    void  (*set)(odecam_pci_device_t *arg0, _set arg1, uint64 arg2);
};
struct _set {
    struct __set _set;
};
struct _get_val {
    uint64 (*get_val)(odecam_pci_device_t *arg0, get_val arg1);
    uint64 (*_default_get)(odecam_pci_device_t *arg0, get_val arg1);
};
struct __get {
    struct _get_val get_val;
    uint64 (*get)(odecam_pci_device_t *arg0, _get arg1);
};
struct _get {
    struct __get _get;
};
struct __register {
    struct __bitsize _bitsize;
    struct __conf_attribute _conf_attribute;
    struct __qname _qname;
    struct _get get;
    struct _init_val init_val;
    struct _read_register read_register;
    struct _set set;
    struct _shown_desc shown_desc;
    struct _write_register write_register;
    _each_in_t fields;
    _each_in_t _get_fields;
    _each_in_t _set_fields;
    _each_in_t _read_fields;
    _each_in_t _write_fields;
    uint64 offset;
    bool _le_byte_order;
    bool _is_read_only;
    bool mapped;
    uint32 val;
    uint64 (*read_unmapped_bits)(odecam_pci_device_t *arg0, _register arg1, uint64 arg2, void  *arg3);
    void  (*write_unmapped_bits)(odecam_pci_device_t *arg0, _register arg1, uint64 arg2, uint64 arg3, void  *arg4);
};
struct _write_field {
    void  (*write_field)(odecam_pci_device_t *arg0, write_field arg1, uint64 arg2, uint64 arg3, void  *arg4);
};
struct _ignore_write {
    struct _write_field write_field;
};
struct _power_on_reset {
    _each_in_t _each_power_on_reset;
    void  (*power_on_reset)(odecam_pci_device_t *arg0, power_on_reset arg1);
    void  (*_default_power_on_reset)(odecam_pci_device_t *arg0, power_on_reset arg1);
};
struct __hard_reset {
    _each_in_t _each_hard_reset;
    void  (*hard_reset)(odecam_pci_device_t *arg0, _hard_reset arg1);
    void  (*_default_hard_reset)(odecam_pci_device_t *arg0, _hard_reset arg1);
};
struct __soft_reset {
    _each_in_t _each_soft_reset;
    void  (*soft_reset)(odecam_pci_device_t *arg0, _soft_reset arg1);
    void  (*_default_soft_reset)(odecam_pci_device_t *arg0, _soft_reset arg1);
};
struct _no_reset {
    struct __hard_reset _hard_reset;
    struct _power_on_reset power_on_reset;
    struct __soft_reset _soft_reset;
};
struct _silent_constant {
    struct _ignore_write ignore_write;
    struct _no_reset no_reset;
};
struct __lsb {
    uint8 lsb;
};
struct _field {
    struct __bitsize _bitsize;
    struct __get _get;
    struct __lsb _lsb;
    struct __set _set;
    struct _init_val init_val;
    struct _object object;
    struct _shown_desc shown_desc;
    _register reg;
};
struct _map_params {
    char const *map_type;
    uint64 map_bit;
    int64 map_func;
};
struct __no_base_address {
    struct _map_params map_params;
};
struct _no_base_address_32 {
    struct __no_base_address _no_base_address;
    struct __register _register;
};
struct __simple_write {
    struct _get_val get_val;
    struct _set_val set_val;
};
struct _write_1_clears {
    struct __simple_write _simple_write;
    struct _write_field write_field;
};
struct _base_address {
    struct _map_params map_params;
    struct __register _register;
    uint64 min_size_bits;
    uint64 size_bits;
    field _base;
    _pci_config_generic_command_reg command;
    _pci_config_generic parent_bank;
    int (*pci_bar_size_bits)(odecam_pci_device_t *arg0, base_address arg1);
    bool (*pci_mapping_enabled)(odecam_pci_device_t *arg0, base_address arg1);
    conf_object_t *(*pci_mapping_object)(odecam_pci_device_t *arg0, base_address arg1);
    conf_object_t *(*pci_mapping_target)(odecam_pci_device_t *arg0, base_address arg1);
    void  (*pci_mapping_customize)(odecam_pci_device_t *arg0, base_address arg1, map_info_t *arg2);
    uint64 (*pci_mapping_base)(odecam_pci_device_t *arg0, base_address arg1);
    uint64 (*pci_mapping_length)(odecam_pci_device_t *arg0, base_address arg1);
    uint64 (*get_base)(odecam_pci_device_t *arg0, base_address arg1);
    void  (*remove_map)(odecam_pci_device_t *arg0, base_address arg1);
    void  (*add_map)(odecam_pci_device_t *arg0, base_address arg1);
    void  (*update_mapping)(odecam_pci_device_t *arg0, base_address arg1);
};
struct __pci_config_generic_command_reg {
    field _io;
    field _mem;
    field _m;
    field _sc;
    field _mwi;
    field _vga;
    field _pe;
    field _wc;
    field _se;
    field _fb;
    field _id;
};
struct ___write {
    struct __get _get;
    struct __set _set;
    struct _write_field write_field;
    void  (*write)(odecam_pci_device_t *arg0, __write arg1, uint64 arg2);
};
struct _read_only_custom_write {
    struct __register _register;
    struct ___write __write;
};
struct _read_field {
    uint64 (*read_field)(odecam_pci_device_t *arg0, read_field arg1, uint64 arg2, void  *arg3);
};
struct _read_zero {
    struct _read_field read_field;
};
struct __reg_or_field {
    bool is_register;
};
struct _constant {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct _get_val get_val;
    struct _no_reset no_reset;
    struct _write_field write_field;
};
struct _unmapped {
    struct __register _register;
};
struct _implement {
    struct _object object;
};
struct _bank_io_memory {
    struct _implement implement;
};
struct _bank_transaction {
    struct _implement implement;
};
struct _bank {
    struct __qname _qname;
    struct _object object;
    struct _shown_desc shown_desc;
    bool partial;
    bool overlapping;
    bool _le_byte_order;
    _each_in_t _each_register;
    bool be_bitorder;
    bool use_io_memory;
    uint32 _before_read_callbacks;
    uint32 _after_read_callbacks;
    uint32 _before_write_callbacks;
    uint32 _after_write_callbacks;
    uint32 _connections;
    uint32 _reginfo_cache;
    uint32 _reginfo_cache_size;
    uint32 _sorted_regs;
    uint32 _num_mapped_regs;
    uint32 _cached_bank_obj;
    bool (*_get_register)(odecam_pci_device_t *arg0, bank arg1, uint32 arg2, _register *arg3);
    bool (*unmapped_read)(odecam_pci_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, void  *arg4, uint64 *arg5);
    bool (*unmapped_write)(odecam_pci_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 arg4, void  *arg5);
    bool (*read)(odecam_pci_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, void  *arg4, uint64 *arg5);
    bool (*unmapped_get)(odecam_pci_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 *arg4);
    bool (*get)(odecam_pci_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 *arg4);
    bool (*write)(odecam_pci_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 arg4, void  *arg5);
    void  (*set)(odecam_pci_device_t *arg0, bank arg1, uint64 arg2, uint64 arg3, uint64 arg4);
    bool (*io_memory_access)(odecam_pci_device_t *arg0, bank arg1, generic_transaction_t *arg2, uint64 arg3, void  *arg4);
    exception_type_t (*transaction_access)(odecam_pci_device_t *arg0, bank arg1, transaction_t *arg2, uint64 arg3, void  *arg4);
};
struct _rbar_capable_bank {
    struct _bank bank;
    _each_in_t _rbar_control;
};
struct ___read {
    struct __get _get;
    struct _read_field read_field;
    uint64 (*read)(odecam_pci_device_t *arg0, __read arg1);
};
struct _miss_pattern_bank {
    struct _bank bank;
    uint8 miss_pattern;
};
struct __pci_config_generic {
    struct _miss_pattern_bank miss_pattern_bank;
    struct _rbar_capable_bank rbar_capable_bank;
};
struct _function_mapped_bank {
    struct _bank bank;
    int function;
};
struct _pci_config_generic {
    struct __pci_config_generic _pci_config_generic;
    struct _function_mapped_bank function_mapped_bank;
};
struct __pci_config_type_0 {
    uint8 _dummy;
};
struct _pci_config_type_0 {
    struct __pci_config_type_0 _pci_config_type_0;
    struct _pci_config_generic pci_config_generic;
};
struct _attribute {
    struct __conf_attribute _conf_attribute;
    attr_value_t (*get)(odecam_pci_device_t *arg0, attribute arg1);
    bool (*set)(odecam_pci_device_t *arg0, attribute arg1, attr_value_t arg2);
};
struct _interface {
    struct _object object;
    bool _required;
    uint32 val;
};
struct __connect {
    struct __conf_attribute _conf_attribute;
    uint32 obj;
    uint32 port;
    bool (*validate)(odecam_pci_device_t *arg0, _connect arg1, conf_object_t *arg2);
};
struct _uint64_attr {
    struct _attribute attribute;
    uint32 val;
};
struct _providing_expansion_rom_connect {
    uint8 _dummy;
};
struct _pci_device_params {
    uint8 _dummy;
};
struct _providing_legacy_interrupts {
    uint8 _dummy;
};
struct _pseudo_attr {
    struct _attribute attribute;
};
struct _read_only_attr {
    struct _pseudo_attr pseudo_attr;
};
struct _pci_bus_connect {
    uint8 _dummy;
};
struct __maybe_provides_pci_bus_connect {
    uint8 _dummy;
};
struct _provides_pci_bus_connect {
    struct __maybe_provides_pci_bus_connect _maybe_provides_pci_bus_connect;
};
struct _providing_pci_bus_connect {
    struct _pci_device_params pci_device_params;
    struct _provides_pci_bus_connect provides_pci_bus_connect;
};
struct _providing_pci_device_interface {
    uint8 _dummy;
};
struct _providing_dma_methods {
    uint32 _tlp_prefix;
};
struct _pci_common {
    struct _providing_dma_methods providing_dma_methods;
    struct _providing_expansion_rom_connect providing_expansion_rom_connect;
    struct _providing_legacy_interrupts providing_legacy_interrupts;
    struct _providing_pci_bus_connect providing_pci_bus_connect;
    struct _providing_pci_device_interface providing_pci_device_interface;
};
struct _pci_device {
    struct _pci_common pci_common;
};
struct _read_only {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct _get_val get_val;
    struct _write_field write_field;
};
struct __reg_write_as_field {
    struct __register _register;
    struct _write_field write_field;
};
struct __reg_read_as_field {
    struct _read_field read_field;
    struct __register _register;
};
struct __get_field {
    struct __bitsize _bitsize;
    struct __lsb _lsb;
    struct _get get;
};
struct __set_field {
    struct __bitsize _bitsize;
    struct __lsb _lsb;
    struct _set set;
};
struct __read_field {
    struct __bitsize _bitsize;
    struct __lsb _lsb;
    struct _read_field read_field;
};
struct __write_field {
    struct __bitsize _bitsize;
    struct __lsb _lsb;
    struct _write_field write_field;
};
struct __init_val_soft_reset {
    struct _init_val init_val;
    struct __soft_reset _soft_reset;
};
struct _port {
    struct __qname _qname;
    struct _object object;
    uint32 _cached_port_obj;
};
struct _sreset {
    struct __soft_reset _soft_reset;
};
struct __init_val_hard_reset {
    struct __hard_reset _hard_reset;
    struct _init_val init_val;
};
struct _hreset {
    struct __hard_reset _hard_reset;
};
struct _function_io_memory {
    uint8 _dummy;
};
struct _memory_base_address_generic {
    struct _base_address base_address;
    field _type;
};
struct _memory_base_address_32 {
    struct _memory_base_address_generic memory_base_address_generic;
};
struct _pcie_device {
    struct _pci_device pci_device;
};
struct _pci_mf_device {
    struct _pci_common pci_common;
};
struct _pci_config_type_0_mf {
    struct __pci_config_generic _pci_config_generic;
    struct __pci_config_type_0 _pci_config_type_0;
};
struct _pci_config_type_1 {
    struct _pci_config_generic pci_config_generic;
};
struct _memory_base_address_64 {
    struct _memory_base_address_generic memory_base_address_generic;
};
struct _io_base_address {
    struct _base_address base_address;
};
struct _no_base_address_64 {
    struct __no_base_address _no_base_address;
    struct __register _register;
};
struct _defining_empty_pcie_extended_conf_space {
    uint8 _dummy;
};
struct _providing_pcie_message_port {
    uint8 _dummy;
};
struct _providing_pcie_upstream_port {
    uint8 _dummy;
};
struct _providing_pcie_downstream_connect {
    uint8 _dummy;
};
struct __defining_pcie_capability_devices_common {
    uint8 _dummy;
};
struct __defining_pcie_capability_devices_2_v2 {
    uint8 _dummy;
};
struct _defining_pcie_capability_devices_v1 {
    struct __defining_pcie_capability_devices_common _defining_pcie_capability_devices_common;
};
struct _defining_pcie_capability_devices_v2 {
    struct __defining_pcie_capability_devices_2_v2 _defining_pcie_capability_devices_2_v2;
    struct __defining_pcie_capability_devices_common _defining_pcie_capability_devices_common;
};
struct _defining_pcie_capability_devices_v21 {
    struct _defining_pcie_capability_devices_v2 defining_pcie_capability_devices_v2;
};
struct _defining_pcie_capability_devices_v3 {
    struct _defining_pcie_capability_devices_v21 defining_pcie_capability_devices_v21;
};
struct _defining_pcie_capability_devices_v31 {
    struct _defining_pcie_capability_devices_v3 defining_pcie_capability_devices_v3;
};
struct _defining_pcie_capability_devices_v4 {
    struct _defining_pcie_capability_devices_v31 defining_pcie_capability_devices_v31;
};
struct _defining_pcie_capability_devices_v5 {
    struct _defining_pcie_capability_devices_v4 defining_pcie_capability_devices_v4;
};
struct __defining_pcie_capability_links_common {
    uint8 _dummy;
};
struct __defining_pcie_capability_links_2_common {
    uint8 _dummy;
};
struct __defining_pcie_capability_links_v2 {
    struct __defining_pcie_capability_links_common _defining_pcie_capability_links_common;
};
struct _defining_pcie_capability_links_2_v2 {
    struct __defining_pcie_capability_links_2_common _defining_pcie_capability_links_2_common;
};
struct _defining_pcie_capability_links_2_v3 {
    struct __defining_pcie_capability_links_2_common _defining_pcie_capability_links_2_common;
};
struct _defining_pcie_capability_links_2_v31 {
    struct _defining_pcie_capability_links_2_v3 defining_pcie_capability_links_2_v3;
};
struct _defining_pcie_capability_links_2_v4 {
    struct _defining_pcie_capability_links_2_v31 defining_pcie_capability_links_2_v31;
};
struct _defining_pcie_capability_links_2_v5 {
    struct _defining_pcie_capability_links_2_v4 defining_pcie_capability_links_2_v4;
};
struct _defining_pcie_capability_links_v1 {
    struct __defining_pcie_capability_links_common _defining_pcie_capability_links_common;
    struct _defining_pcie_capability_devices_v1 defining_pcie_capability_devices_v1;
};
struct _defining_pcie_capability_links_v2 {
    struct __defining_pcie_capability_links_v2 _defining_pcie_capability_links_v2;
    struct _defining_pcie_capability_devices_v2 defining_pcie_capability_devices_v2;
    struct _defining_pcie_capability_links_2_v2 defining_pcie_capability_links_2_v2;
};
struct _defining_pcie_capability_links_v3 {
    struct __defining_pcie_capability_links_v2 _defining_pcie_capability_links_v2;
    struct _defining_pcie_capability_devices_v3 defining_pcie_capability_devices_v3;
    struct _defining_pcie_capability_links_2_v3 defining_pcie_capability_links_2_v3;
};
struct _defining_pcie_capability_links_v31 {
    struct _defining_pcie_capability_devices_v31 defining_pcie_capability_devices_v31;
    struct _defining_pcie_capability_links_v3 defining_pcie_capability_links_v3;
};
struct _defining_pcie_capability_links_v4 {
    struct _defining_pcie_capability_devices_v4 defining_pcie_capability_devices_v4;
    struct _defining_pcie_capability_links_v31 defining_pcie_capability_links_v31;
};
struct _defining_pcie_capability_links_v5 {
    struct _defining_pcie_capability_devices_v5 defining_pcie_capability_devices_v5;
    struct _defining_pcie_capability_links_v4 defining_pcie_capability_links_v4;
};
struct __defining_pcie_capability_slots_common {
    uint8 _dummy;
};
struct __defining_pcie_capability_slots_v2 {
    struct __defining_pcie_capability_slots_common _defining_pcie_capability_slots_common;
};
struct __defining_pcie_capability_slots_v3 {
    struct __defining_pcie_capability_slots_v2 _defining_pcie_capability_slots_v2;
};
struct _defining_pcie_capability_slots_2_v2 {
    uint8 _dummy;
};
struct _defining_pcie_capability_slots_2_v3 {
    struct _defining_pcie_capability_slots_2_v2 defining_pcie_capability_slots_2_v2;
};
struct _defining_pcie_capability_slots_2_v4 {
    struct _defining_pcie_capability_slots_2_v3 defining_pcie_capability_slots_2_v3;
};
struct _defining_pcie_capability_slots_2_v5 {
    struct _defining_pcie_capability_slots_2_v4 defining_pcie_capability_slots_2_v4;
};
struct _defining_pcie_capability_slots_v1 {
    struct __defining_pcie_capability_slots_common _defining_pcie_capability_slots_common;
    struct _defining_pcie_capability_links_v1 defining_pcie_capability_links_v1;
};
struct _defining_pcie_capability_slots_v2 {
    struct __defining_pcie_capability_slots_v2 _defining_pcie_capability_slots_v2;
    struct _defining_pcie_capability_links_v2 defining_pcie_capability_links_v2;
    struct _defining_pcie_capability_slots_2_v2 defining_pcie_capability_slots_2_v2;
};
struct _defining_pcie_capability_slots_v3 {
    struct __defining_pcie_capability_slots_v3 _defining_pcie_capability_slots_v3;
    struct _defining_pcie_capability_links_v3 defining_pcie_capability_links_v3;
    struct _defining_pcie_capability_slots_2_v3 defining_pcie_capability_slots_2_v3;
};
struct _defining_pcie_capability_slots_v31 {
    struct _defining_pcie_capability_links_v31 defining_pcie_capability_links_v31;
    struct _defining_pcie_capability_slots_v3 defining_pcie_capability_slots_v3;
};
struct _defining_pcie_capability_slots_v4 {
    struct _defining_pcie_capability_links_v4 defining_pcie_capability_links_v4;
    struct _defining_pcie_capability_slots_v31 defining_pcie_capability_slots_v31;
};
struct _defining_pcie_capability_slots_v5 {
    struct _defining_pcie_capability_links_v5 defining_pcie_capability_links_v5;
    struct _defining_pcie_capability_slots_v4 defining_pcie_capability_slots_v4;
};
struct __defining_pcie_capability_root_ports_common {
    uint8 _dummy;
};
struct __defining_pcie_capability_root_ports_v2 {
    struct __defining_pcie_capability_root_ports_common _defining_pcie_capability_root_ports_common;
};
struct __defining_pcie_capability_root_ports_v3 {
    struct __defining_pcie_capability_root_ports_v2 _defining_pcie_capability_root_ports_v2;
};
struct __defining_pcie_capability_root_ports_v4 {
    struct __defining_pcie_capability_root_ports_v3 _defining_pcie_capability_root_ports_v3;
};
struct __defining_pcie_capability_root_ports_v5 {
    struct __defining_pcie_capability_root_ports_v4 _defining_pcie_capability_root_ports_v4;
};
struct _defining_pcie_capability_root_ports_v1 {
    struct __defining_pcie_capability_root_ports_common _defining_pcie_capability_root_ports_common;
    struct _defining_pcie_capability_slots_v1 defining_pcie_capability_slots_v1;
};
struct _defining_pcie_capability_root_ports_v2 {
    struct __defining_pcie_capability_root_ports_v2 _defining_pcie_capability_root_ports_v2;
    struct _defining_pcie_capability_slots_v2 defining_pcie_capability_slots_v2;
};
struct _defining_pcie_capability_root_ports_v3 {
    struct __defining_pcie_capability_root_ports_v3 _defining_pcie_capability_root_ports_v3;
    struct _defining_pcie_capability_slots_v3 defining_pcie_capability_slots_v3;
};
struct _defining_pcie_capability_root_ports_v4 {
    struct __defining_pcie_capability_root_ports_v4 _defining_pcie_capability_root_ports_v4;
    struct _defining_pcie_capability_slots_v4 defining_pcie_capability_slots_v4;
};
struct _defining_pcie_capability_root_ports_v5 {
    struct __defining_pcie_capability_root_ports_v5 _defining_pcie_capability_root_ports_v5;
    struct _defining_pcie_capability_slots_v5 defining_pcie_capability_slots_v5;
};
struct _defining_pcie_capability_v1 {
    struct _defining_pcie_capability_root_ports_v1 defining_pcie_capability_root_ports_v1;
};
struct _defining_pcie_capability_v2 {
    struct _defining_pcie_capability_root_ports_v2 defining_pcie_capability_root_ports_v2;
};
struct _defining_pcie_capability_v3 {
    struct _defining_pcie_capability_root_ports_v3 defining_pcie_capability_root_ports_v3;
};
struct _sticky {
    struct __soft_reset _soft_reset;
};
struct __defining_pcie_aer_capability_common {
    uint8 _dummy;
};
struct _defining_pcie_aer_capability_v1 {
    struct __defining_pcie_aer_capability_common _defining_pcie_aer_capability_common;
};
struct _defining_pcie_aer_capability_v2 {
    struct __defining_pcie_aer_capability_common _defining_pcie_aer_capability_common;
};
struct _defining_pcie_aer_capability_v21 {
    struct _defining_pcie_aer_capability_v2 defining_pcie_aer_capability_v2;
};
struct _defining_pcie_aer_capability_v3 {
    struct _defining_pcie_aer_capability_v21 defining_pcie_aer_capability_v21;
};
struct _defining_pcie_aer_capability_v4 {
    struct _defining_pcie_aer_capability_v3 defining_pcie_aer_capability_v3;
};
struct _defining_pcie_aer_capability_v5 {
    struct _defining_pcie_aer_capability_v4 defining_pcie_aer_capability_v4;
};
struct __defining_pcie_vc_capability_common {
    uint8 _dummy;
};
struct _defining_pcie_vc_capability_v1 {
    struct __defining_pcie_vc_capability_common _defining_pcie_vc_capability_common;
};
struct _defining_pcie_vc_capability_v2 {
    struct __defining_pcie_vc_capability_common _defining_pcie_vc_capability_common;
};
struct _defining_pcie_vc_capability_v3 {
    struct _defining_pcie_vc_capability_v2 defining_pcie_vc_capability_v2;
};
struct _defining_pcie_vc_capability_v4 {
    struct _defining_pcie_vc_capability_v3 defining_pcie_vc_capability_v3;
};
struct _defining_pcie_vc_capability_v5 {
    struct _defining_pcie_vc_capability_v4 defining_pcie_vc_capability_v4;
};
struct _defining_pcie_dsn_capability_v1 {
    uint8 _dummy;
};
struct _defining_pcie_dsn_capability_v2 {
    struct _defining_pcie_dsn_capability_v1 defining_pcie_dsn_capability_v1;
};
struct _defining_pcie_dsn_capability_v3 {
    struct _defining_pcie_dsn_capability_v2 defining_pcie_dsn_capability_v2;
};
struct _defining_pcie_dsn_capability_v4 {
    struct _defining_pcie_dsn_capability_v3 defining_pcie_dsn_capability_v3;
};
struct _defining_pcie_dsn_capability_v5 {
    struct _defining_pcie_dsn_capability_v4 defining_pcie_dsn_capability_v4;
};
struct __defining_pcie_rcld_capability_common {
    uint8 _dummy;
};
struct _defining_pcie_rcld_capability_v2 {
    struct __defining_pcie_rcld_capability_common _defining_pcie_rcld_capability_common;
};
struct _defining_pcie_rcld_capability_v3 {
    struct _defining_pcie_rcld_capability_v2 defining_pcie_rcld_capability_v2;
};
struct _defining_pcie_rcld_capability_v4 {
    struct _defining_pcie_rcld_capability_v3 defining_pcie_rcld_capability_v3;
};
struct _defining_pcie_rcld_capability_v5 {
    struct _defining_pcie_rcld_capability_v4 defining_pcie_rcld_capability_v4;
};
struct __defining_pcie_rcilc_capability_common {
    uint8 _dummy;
};
struct _defining_pcie_rcilc_capability_v2 {
    struct __defining_pcie_rcilc_capability_common _defining_pcie_rcilc_capability_common;
};
struct _defining_pcie_rcilc_capability_v3 {
    struct __defining_pcie_rcilc_capability_common _defining_pcie_rcilc_capability_common;
};
struct _defining_pcie_rcilc_capability_v4 {
    struct _defining_pcie_rcilc_capability_v3 defining_pcie_rcilc_capability_v3;
};
struct _defining_pcie_rcilc_capability_v5 {
    struct _defining_pcie_rcilc_capability_v4 defining_pcie_rcilc_capability_v4;
};
struct _defining_pcie_dpb_capability_v1 {
    uint8 _dummy;
};
struct _defining_pcie_dpb_capability_v2 {
    struct _defining_pcie_dpb_capability_v1 defining_pcie_dpb_capability_v1;
};
struct _defining_pcie_dpb_capability_v3 {
    struct _defining_pcie_dpb_capability_v2 defining_pcie_dpb_capability_v2;
};
struct _defining_pcie_dpb_capability_v4 {
    struct _defining_pcie_dpb_capability_v3 defining_pcie_dpb_capability_v3;
};
struct _defining_pcie_dpb_capability_v5 {
    struct _defining_pcie_dpb_capability_v4 defining_pcie_dpb_capability_v4;
};
struct _defining_pcie_acs_capability_v2 {
    uint8 _dummy;
};
struct _defining_pcie_acs_capability_v3 {
    struct _defining_pcie_acs_capability_v2 defining_pcie_acs_capability_v2;
};
struct _defining_pcie_acs_capability_v4 {
    struct _defining_pcie_acs_capability_v3 defining_pcie_acs_capability_v3;
};
struct _defining_pcie_acs_capability_v5 {
    struct _defining_pcie_acs_capability_v4 defining_pcie_acs_capability_v4;
};
struct __defining_pcie_rcecea_capability_common {
    uint8 _dummy;
};
struct _defining_pcie_rcecea_capability_v2 {
    struct __defining_pcie_rcecea_capability_common _defining_pcie_rcecea_capability_common;
};
struct _defining_pcie_rcecea_capability_v3 {
    struct _defining_pcie_rcecea_capability_v2 defining_pcie_rcecea_capability_v2;
};
struct _defining_pcie_rcecea_capability_v4 {
    struct _defining_pcie_rcecea_capability_v3 defining_pcie_rcecea_capability_v3;
};
struct _defining_pcie_rcecea_capability_v5 {
    struct _defining_pcie_rcecea_capability_v4 defining_pcie_rcecea_capability_v4;
};
struct __defining_pcie_mfvc_capability_common {
    uint8 _dummy;
};
struct _defining_pcie_mfvc_capability_v2 {
    struct __defining_pcie_mfvc_capability_common _defining_pcie_mfvc_capability_common;
};
struct _defining_pcie_mfvc_capability_v3 {
    struct _defining_pcie_mfvc_capability_v2 defining_pcie_mfvc_capability_v2;
};
struct _defining_pcie_mfvc_capability_v4 {
    struct _defining_pcie_mfvc_capability_v3 defining_pcie_mfvc_capability_v3;
};
struct _defining_pcie_mfvc_capability_v5 {
    struct _defining_pcie_mfvc_capability_v4 defining_pcie_mfvc_capability_v4;
};
struct __defining_pcie_vsec_capability_common {
    uint8 _dummy;
};
struct _defining_pcie_vsec_capability_v2 {
    struct __defining_pcie_vsec_capability_common _defining_pcie_vsec_capability_common;
};
struct _defining_pcie_vsec_capability_v3 {
    struct _defining_pcie_vsec_capability_v2 defining_pcie_vsec_capability_v2;
};
struct _defining_pcie_vsec_capability_v4 {
    struct _defining_pcie_vsec_capability_v3 defining_pcie_vsec_capability_v3;
};
struct _defining_pcie_vsec_capability_v5 {
    struct _defining_pcie_vsec_capability_v4 defining_pcie_vsec_capability_v4;
};
struct __defining_pcie_rcrb_capability_common {
    uint8 _dummy;
};
struct _defining_pcie_rcrb_capability_v2 {
    struct __defining_pcie_rcrb_capability_common _defining_pcie_rcrb_capability_common;
};
struct _defining_pcie_rcrb_capability_v3 {
    struct _defining_pcie_rcrb_capability_v2 defining_pcie_rcrb_capability_v2;
};
struct _defining_pcie_rcrb_capability_v4 {
    struct _defining_pcie_rcrb_capability_v3 defining_pcie_rcrb_capability_v3;
};
struct _defining_pcie_rcrb_capability_v5 {
    struct _defining_pcie_rcrb_capability_v4 defining_pcie_rcrb_capability_v4;
};
struct _defining_pcie_mc_capability_v21 {
    uint8 _dummy;
};
struct _defining_pcie_mc_capability_v3 {
    struct _defining_pcie_mc_capability_v21 defining_pcie_mc_capability_v21;
};
struct _defining_pcie_mc_capability_v4 {
    struct _defining_pcie_mc_capability_v3 defining_pcie_mc_capability_v3;
};
struct _defining_pcie_mc_capability_v5 {
    struct _defining_pcie_mc_capability_v4 defining_pcie_mc_capability_v4;
};
struct _rbar_control_reg {
    struct __register _register;
    field _id;
    field _num;
    field _sz;
};
struct _defining_pcie_rbar_capability_v21 {
    struct _rbar_capable_bank rbar_capable_bank;
};
struct _resizable_bar {
    struct _base_address base_address;
};
struct _defining_pcie_rbar_capability_v3 {
    struct _defining_pcie_rbar_capability_v21 defining_pcie_rbar_capability_v21;
};
struct _defining_pcie_rbar_capability_v4 {
    struct _defining_pcie_rbar_capability_v3 defining_pcie_rbar_capability_v3;
};
struct _defining_pcie_rbar_capability_v5 {
    struct _defining_pcie_rbar_capability_v4 defining_pcie_rbar_capability_v4;
};
struct _defining_pcie_ari_capability_v21 {
    uint8 _dummy;
};
struct _defining_pcie_ari_capability_v3 {
    struct _defining_pcie_ari_capability_v21 defining_pcie_ari_capability_v21;
};
struct _defining_pcie_ari_capability_v4 {
    struct _defining_pcie_ari_capability_v3 defining_pcie_ari_capability_v3;
};
struct _defining_pcie_ari_capability_v5 {
    struct _defining_pcie_ari_capability_v4 defining_pcie_ari_capability_v4;
};
struct _defining_pcie_dpa_capability_v21 {
    uint8 _dummy;
};
struct _defining_pcie_dpa_capability_v3 {
    struct _defining_pcie_dpa_capability_v21 defining_pcie_dpa_capability_v21;
};
struct _defining_pcie_dpa_capability_v4 {
    struct _defining_pcie_dpa_capability_v3 defining_pcie_dpa_capability_v3;
};
struct _defining_pcie_dpa_capability_v5 {
    struct _defining_pcie_dpa_capability_v4 defining_pcie_dpa_capability_v4;
};
struct _defining_pcie_ltr_capability_v21 {
    uint8 _dummy;
};
struct _defining_pcie_ltr_capability_v3 {
    struct _defining_pcie_ltr_capability_v21 defining_pcie_ltr_capability_v21;
};
struct _defining_pcie_ltr_capability_v4 {
    struct _defining_pcie_ltr_capability_v3 defining_pcie_ltr_capability_v3;
};
struct _defining_pcie_ltr_capability_v5 {
    struct _defining_pcie_ltr_capability_v4 defining_pcie_ltr_capability_v4;
};
struct _defining_pcie_tph_capability_v21 {
    uint8 _dummy;
};
struct _defining_pcie_tph_capability_v3 {
    struct _defining_pcie_tph_capability_v21 defining_pcie_tph_capability_v21;
};
struct _defining_pcie_tph_capability_v4 {
    struct _defining_pcie_tph_capability_v3 defining_pcie_tph_capability_v3;
};
struct _defining_pcie_tph_capability_v5 {
    struct _defining_pcie_tph_capability_v4 defining_pcie_tph_capability_v4;
};
struct _defining_pcie_spe_capability_v3 {
    uint8 _dummy;
};
struct _defining_pcie_spe_capability_v4 {
    struct _defining_pcie_spe_capability_v3 defining_pcie_spe_capability_v3;
};
struct _defining_pcie_spe_capability_v5 {
    struct _defining_pcie_spe_capability_v4 defining_pcie_spe_capability_v4;
};
struct _defining_pcie_mpcie_capability_v31 {
    uint8 _dummy;
};
struct _defining_pcie_mpcie_capability_v4 {
    struct _defining_pcie_mpcie_capability_v31 defining_pcie_mpcie_capability_v31;
};
struct _defining_pcie_mpcie_capability_v5 {
    struct _defining_pcie_mpcie_capability_v4 defining_pcie_mpcie_capability_v4;
};
struct _defining_pcie_pasid_capability_v31 {
    uint8 _dummy;
};
struct _defining_pcie_pasid_capability_v4 {
    struct _defining_pcie_pasid_capability_v31 defining_pcie_pasid_capability_v31;
};
struct _defining_pcie_pasid_capability_v5 {
    struct _defining_pcie_pasid_capability_v4 defining_pcie_pasid_capability_v4;
};
struct _defining_pcie_lnr_capability_v31 {
    uint8 _dummy;
};
struct _defining_pcie_lnr_capability_v4 {
    struct _defining_pcie_lnr_capability_v31 defining_pcie_lnr_capability_v31;
};
struct _defining_pcie_lnr_capability_v5 {
    struct _defining_pcie_lnr_capability_v4 defining_pcie_lnr_capability_v4;
};
struct _defining_pcie_dpc_capability_v31 {
    uint8 _dummy;
};
struct _defining_pcie_dpc_capability_v4 {
    struct _defining_pcie_dpc_capability_v31 defining_pcie_dpc_capability_v31;
};
struct _defining_pcie_dpc_capability_v5 {
    struct _defining_pcie_dpc_capability_v4 defining_pcie_dpc_capability_v4;
};
struct _defining_pcie_ptm_capability_v31 {
    uint8 _dummy;
};
struct _defining_pcie_ptm_capability_v4 {
    struct _defining_pcie_ptm_capability_v31 defining_pcie_ptm_capability_v31;
};
struct _defining_pcie_ptm_capability_v5 {
    struct _defining_pcie_ptm_capability_v4 defining_pcie_ptm_capability_v4;
};
struct _defining_pcie_l1pms_capability_v31 {
    uint8 _dummy;
};
struct _defining_pcie_l1pms_capability_v4 {
    struct _defining_pcie_l1pms_capability_v31 defining_pcie_l1pms_capability_v31;
};
struct _defining_pcie_l1pms_capability_v5 {
    struct _defining_pcie_l1pms_capability_v4 defining_pcie_l1pms_capability_v4;
};
struct _defining_pcie_frsq_capability_v31 {
    uint8 _dummy;
};
struct _defining_pcie_frsq_capability_v4 {
    struct _defining_pcie_frsq_capability_v31 defining_pcie_frsq_capability_v31;
};
struct _defining_pcie_frsq_capability_v5 {
    struct _defining_pcie_frsq_capability_v4 defining_pcie_frsq_capability_v4;
};
struct _defining_pcie_rtr_capability_v31 {
    uint8 _dummy;
};
struct _defining_pcie_rtr_capability_v4 {
    struct _defining_pcie_rtr_capability_v31 defining_pcie_rtr_capability_v31;
};
struct _defining_pcie_rtr_capability_v5 {
    struct _defining_pcie_rtr_capability_v4 defining_pcie_rtr_capability_v4;
};
struct _defining_pcie_dlf_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_dlf_capability_v5 {
    struct _defining_pcie_dlf_capability_v4 defining_pcie_dlf_capability_v4;
};
struct _defining_pcie_pl16g_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_pl16g_capability_v5 {
    struct _defining_pcie_pl16g_capability_v4 defining_pcie_pl16g_capability_v4;
};
struct _defining_pcie_pl32g_capability_v5 {
    uint8 _dummy;
};
struct _defining_pcie_lmar_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_lmar_capability_v5 {
    struct _defining_pcie_lmar_capability_v4 defining_pcie_lmar_capability_v4;
};
struct _defining_pcie_ea_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_ea_capability_v5 {
    struct _defining_pcie_ea_capability_v4 defining_pcie_ea_capability_v4;
};
struct _defining_pcie_fpb_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_fpb_capability_v5 {
    struct _defining_pcie_fpb_capability_v4 defining_pcie_fpb_capability_v4;
};
struct _defining_pcie_dvsec_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_dvsec_capability_v5 {
    struct _defining_pcie_dvsec_capability_v4 defining_pcie_dvsec_capability_v4;
};
struct _defining_pcie_hid_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_hid_capability_v5 {
    struct _defining_pcie_hid_capability_v4 defining_pcie_hid_capability_v4;
};
struct _defining_pcie_vpd_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_vpd_capability_v5 {
    struct _defining_pcie_vpd_capability_v4 defining_pcie_vpd_capability_v4;
};
struct _defining_pcie_npem_capability_v4 {
    uint8 _dummy;
};
struct _defining_pcie_npem_capability_v5 {
    struct _defining_pcie_npem_capability_v4 defining_pcie_npem_capability_v4;
};
struct _defining_pcie_ap_capability_v5 {
    uint8 _dummy;
};
struct _defining_pcie_af_capability_v5 {
    uint8 _dummy;
};
struct _defining_pcie_sfi_capability_v5 {
    uint8 _dummy;
};
struct _defining_pcie_ssid_capability_v5 {
    uint8 _dummy;
};
struct _providing_pcie_ats_methods {
    exception_type_t (*ats_invalidate_received)(odecam_pci_device_t *arg0, providing_pcie_ats_methods arg1, transaction_t *arg2, uint64 arg3);
    exception_type_t (*ats_transaction_received)(odecam_pci_device_t *arg0, providing_pcie_ats_methods arg1, transaction_t *arg2, uint64 arg3);
};
struct _defining_pcie_ats_capability {
    struct _providing_pcie_ats_methods providing_pcie_ats_methods;
};
struct _providing_pcie_prs_methods {
    exception_type_t (*page_request_received)(odecam_pci_device_t *arg0, providing_pcie_prs_methods arg1, transaction_t *arg2, uint64 arg3);
    exception_type_t (*page_response_received)(odecam_pci_device_t *arg0, providing_pcie_prs_methods arg1, transaction_t *arg2, uint64 arg3);
};
struct _defining_pcie_prs_capability {
    struct _providing_pcie_prs_methods providing_pcie_prs_methods;
};
struct _dml12_compat_io_memory_access {
    uint8 _dummy;
};
struct _dml12_compat_read_register {
    uint8 _dummy;
};
struct _dml12_compat_write_register {
    uint8 _dummy;
};
struct _dml12_compat_read_field {
    uint8 _dummy;
};
struct _dml12_compat_write_field {
    uint8 _dummy;
};
struct _defining_pcie_capability_slots_2_v31 {
    struct _defining_pcie_capability_slots_2_v3 defining_pcie_capability_slots_2_v3;
};
struct _defining_pcie_capability_root_ports_v31 {
    struct _defining_pcie_capability_root_ports_v3 defining_pcie_capability_root_ports_v3;
};
struct _defining_pcie_aer_capability_v31 {
    struct _defining_pcie_aer_capability_v3 defining_pcie_aer_capability_v3;
};
struct _defining_pcie_vc_capability_v31 {
    struct _defining_pcie_vc_capability_v3 defining_pcie_vc_capability_v3;
};
struct _defining_pcie_dsn_capability_v31 {
    struct _defining_pcie_dsn_capability_v3 defining_pcie_dsn_capability_v3;
};
struct _defining_pcie_rcld_capability_v31 {
    struct _defining_pcie_rcld_capability_v3 defining_pcie_rcld_capability_v3;
};
struct _defining_pcie_rcilc_capability_v31 {
    struct _defining_pcie_rcilc_capability_v3 defining_pcie_rcilc_capability_v3;
};
struct _defining_pcie_dpb_capability_v31 {
    struct _defining_pcie_dpb_capability_v3 defining_pcie_dpb_capability_v3;
};
struct _defining_pcie_acs_capability_v31 {
    struct _defining_pcie_acs_capability_v3 defining_pcie_acs_capability_v3;
};
struct _defining_pcie_rcecea_capability_v31 {
    struct _defining_pcie_rcecea_capability_v3 defining_pcie_rcecea_capability_v3;
};
struct _defining_pcie_mfvc_capability_v31 {
    struct _defining_pcie_mfvc_capability_v3 defining_pcie_mfvc_capability_v3;
};
struct _defining_pcie_vsec_capability_v31 {
    struct _defining_pcie_vsec_capability_v3 defining_pcie_vsec_capability_v3;
};
struct _defining_pcie_rcrb_capability_v31 {
    struct _defining_pcie_rcrb_capability_v3 defining_pcie_rcrb_capability_v3;
};
struct _defining_pcie_mc_capability_v31 {
    struct _defining_pcie_mc_capability_v3 defining_pcie_mc_capability_v3;
};
struct _defining_pcie_rbar_capability_v31 {
    struct _defining_pcie_rbar_capability_v3 defining_pcie_rbar_capability_v3;
};
struct _defining_pcie_ari_capability_v31 {
    struct _defining_pcie_ari_capability_v3 defining_pcie_ari_capability_v3;
};
struct _defining_pcie_dpa_capability_v31 {
    struct _defining_pcie_dpa_capability_v3 defining_pcie_dpa_capability_v3;
};
struct _defining_pcie_ltr_capability_v31 {
    struct _defining_pcie_ltr_capability_v3 defining_pcie_ltr_capability_v3;
};
struct _defining_pcie_tph_capability_v31 {
    struct _defining_pcie_tph_capability_v3 defining_pcie_tph_capability_v3;
};
struct _defining_pcie_spe_capability_v31 {
    struct _defining_pcie_spe_capability_v3 defining_pcie_spe_capability_v3;
};
struct _defining_pcie_capability_links_v21 {
    struct _defining_pcie_capability_devices_v21 defining_pcie_capability_devices_v21;
    struct _defining_pcie_capability_links_v2 defining_pcie_capability_links_v2;
};
struct _defining_pcie_capability_slots_v21 {
    struct _defining_pcie_capability_links_v21 defining_pcie_capability_links_v21;
    struct _defining_pcie_capability_slots_v2 defining_pcie_capability_slots_v2;
};
struct _defining_pcie_capability_root_ports_v21 {
    struct _defining_pcie_capability_root_ports_v2 defining_pcie_capability_root_ports_v2;
    struct _defining_pcie_capability_slots_v21 defining_pcie_capability_slots_v21;
};
struct _defining_pcie_capability_v21 {
    struct _defining_pcie_capability_root_ports_v21 defining_pcie_capability_root_ports_v21;
};
struct _defining_pcie_capability_links_2_v21 {
    struct _defining_pcie_capability_links_2_v2 defining_pcie_capability_links_2_v2;
};
struct _defining_pcie_capability_slots_2_v21 {
    struct _defining_pcie_capability_slots_2_v2 defining_pcie_capability_slots_2_v2;
};
struct _defining_pcie_vc_capability_v21 {
    struct _defining_pcie_vc_capability_v2 defining_pcie_vc_capability_v2;
};
struct _defining_pcie_dsn_capability_v21 {
    struct _defining_pcie_dsn_capability_v2 defining_pcie_dsn_capability_v2;
};
struct _defining_pcie_rcld_capability_v21 {
    struct _defining_pcie_rcld_capability_v2 defining_pcie_rcld_capability_v2;
};
struct _defining_pcie_rcilc_capability_v21 {
    struct _defining_pcie_rcilc_capability_v2 defining_pcie_rcilc_capability_v2;
};
struct _defining_pcie_dpb_capability_v21 {
    struct _defining_pcie_dpb_capability_v2 defining_pcie_dpb_capability_v2;
};
struct _defining_pcie_acs_capability_v21 {
    struct _defining_pcie_acs_capability_v2 defining_pcie_acs_capability_v2;
};
struct _defining_pcie_rcecea_capability_v21 {
    struct _defining_pcie_rcecea_capability_v2 defining_pcie_rcecea_capability_v2;
};
struct _defining_pcie_mfvc_capability_v21 {
    struct _defining_pcie_mfvc_capability_v2 defining_pcie_mfvc_capability_v2;
};
struct _defining_pcie_vsec_capability_v21 {
    struct _defining_pcie_vsec_capability_v2 defining_pcie_vsec_capability_v2;
};
struct _defining_pcie_rcrb_capability_v21 {
    struct _defining_pcie_rcrb_capability_v2 defining_pcie_rcrb_capability_v2;
};
struct __defining_pci_msi_capability_common {
    uint8 _dummy;
};
struct __defining_pci_pvm_capability_common {
    uint8 _dummy;
};
struct _defining_pci_msi_capability {
    struct __defining_pci_msi_capability_common _defining_pci_msi_capability_common;
};
struct _defining_pci_msi64_capability {
    struct __defining_pci_msi_capability_common _defining_pci_msi_capability_common;
};
struct _defining_pci_msi_pvm_capability {
    struct __defining_pci_pvm_capability_common _defining_pci_pvm_capability_common;
    struct _defining_pci_msi_capability defining_pci_msi_capability;
};
struct _defining_pci_msi64_pvm_capability {
    struct __defining_pci_pvm_capability_common _defining_pci_pvm_capability_common;
    struct _defining_pci_msi64_capability defining_pci_msi64_capability;
};
struct _defining_pci_msix_capability {
    uint8 _dummy;
};
struct _num_of_vectors {
    uint8 _dummy;
};
struct _msix_table_bank {
    struct _bank bank;
    struct _num_of_vectors num_of_vectors;
};
struct __pending_bits {
    struct _num_of_vectors num_of_vectors;
};
struct _msix_table_bank_with_pba {
    struct __pending_bits _pending_bits;
    struct _msix_table_bank msix_table_bank;
};
struct _msix_pba_bank {
    struct __pending_bits _pending_bits;
    struct _bank bank;
};
struct _providing_msix_interrupts {
    struct _defining_pci_msix_capability defining_pci_msix_capability;
};
struct _defining_pci_pcix_capability {
    uint8 _dummy;
};
struct _defining_pci_pm_capability {
    uint8 _dummy;
};
struct __init_val_power_on_reset {
    struct _init_val init_val;
    struct _power_on_reset power_on_reset;
};
struct _poreset {
    struct _power_on_reset power_on_reset;
};
struct _soft_reset_val {
    struct _set_val set_val;
    struct __soft_reset _soft_reset;
    uint64 soft_reset_val;
};
struct _write_only {
    struct __qname _qname;
    struct _read_field read_field;
};
struct _clear_on_read {
    struct _get_val get_val;
    struct _read_field read_field;
    struct _set_val set_val;
};
struct _write_1_only {
    struct __simple_write _simple_write;
    struct _write_field write_field;
};
struct _write_0_only {
    struct __simple_write _simple_write;
    struct _write_field write_field;
};
struct _read_constant {
    struct _read_field read_field;
    uint64 read_val;
};
struct _zeros {
    struct _constant constant;
    struct _init_val init_val;
};
struct _ones {
    struct _constant constant;
    struct _init_val init_val;
};
struct _ignore {
    struct _ignore_write ignore_write;
    struct _no_reset no_reset;
};
struct _reserved {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct __simple_write _simple_write;
    struct _write_field write_field;
    uint32 _has_logged;
};
struct __log_unimpl_read {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct _get_val get_val;
    struct _read_field read_field;
};
struct __log_unimpl_write {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct __simple_write _simple_write;
    struct _write_field write_field;
};
struct _unimpl {
    struct __log_unimpl_read _log_unimpl_read;
    struct __log_unimpl_write _log_unimpl_write;
    struct _limitations limitations;
};
struct _read_unimpl {
    struct __log_unimpl_read _log_unimpl_read;
    struct _limitations limitations;
};
struct _write_unimpl {
    struct __log_unimpl_write _log_unimpl_write;
    struct _object object;
};
struct _silent_unimpl {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct __simple_write _simple_write;
    struct _limitations limitations;
    struct _read_field read_field;
    struct _write_field write_field;
};
struct _undocumented {
    struct __qname _qname;
    struct __reg_or_field _reg_or_field;
    struct __simple_write _simple_write;
    struct _read_field read_field;
    struct _write_field write_field;
};
struct _design_limitation {
    struct _limitations limitations;
};
struct _bank_obj {
    struct _bank bank;
};
struct _map_target {
    struct __qname _qname;
    struct __connect _connect;
    uint32 map_target;
    exception_type_t (*issue)(odecam_pci_device_t *arg0, map_target arg1, transaction_t *arg2, uint64 arg3);
};
struct _group {
    struct _object object;
};
struct _bool_attr {
    struct _attribute attribute;
    uint32 val;
};
struct _int64_attr {
    struct _attribute attribute;
    uint32 val;
};
struct _double_attr {
    struct _attribute attribute;
    uint32 val;
};
struct _write_only_attr {
    struct _pseudo_attr pseudo_attr;
};
struct _init_as_subobj {
    struct __qname _qname;
    struct __connect _connect;
    struct _init init;
};
struct _subdevice {
    struct __qname _qname;
    struct _object object;
    uint32 _cached_port_obj;
};
struct _event {
    struct __qname _qname;
    struct _object object;
    struct _shown_desc shown_desc;
    event_class_t **_pevclass;
    void  (*_callback)(odecam_pci_device_t *arg0, event arg1, void  *arg2);
    char *(*_describe_event)(odecam_pci_device_t *arg0, event arg1, void  *arg2);
    attr_value_t (*_get_event_info)(odecam_pci_device_t *arg0, event arg1, void  *arg2);
    void  *(*_set_event_info)(odecam_pci_device_t *arg0, event arg1, attr_value_t arg2);
    void  (*_destroy)(odecam_pci_device_t *arg0, event arg1, void  *arg2);
};
struct __event {
    struct _event event;
};
struct __time_event {
    struct __event _event;
};
struct __cycle_event {
    struct __event _event;
};
struct __simple_event {
    struct __event _event;
    void  (*event)(odecam_pci_device_t *arg0, _simple_event arg1);
};
struct _simple_time_event {
    struct __simple_event _simple_event;
    struct __time_event _time_event;
};
struct _simple_cycle_event {
    struct __cycle_event _cycle_event;
    struct __simple_event _simple_event;
};
struct __custom_event {
    struct __event _event;
    void  (*event)(odecam_pci_device_t *arg0, _custom_event arg1, void  *arg2);
    attr_value_t (*get_event_info)(odecam_pci_device_t *arg0, _custom_event arg1, void  *arg2);
    void  *(*set_event_info)(odecam_pci_device_t *arg0, _custom_event arg1, attr_value_t arg2);
    void  (*destroy)(odecam_pci_device_t *arg0, _custom_event arg1, void  *arg2);
};
struct _custom_time_event {
    struct __custom_event _custom_event;
    struct __time_event _time_event;
};
struct _custom_cycle_event {
    struct __custom_event _custom_event;
    struct __cycle_event _cycle_event;
};
struct __uint64_event {
    struct __event _event;
    void  (*event)(odecam_pci_device_t *arg0, _uint64_event arg1, uint64 arg2);
};
struct _uint64_time_event {
    struct __time_event _time_event;
    struct __uint64_event _uint64_event;
};
struct _uint64_cycle_event {
    struct __cycle_event _cycle_event;
    struct __uint64_event _uint64_event;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset__memory_base_address_32 {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct _memory_base_address_32 memory_base_address_32;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___read_field___write_field__field__read__write {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __read_field _read_field;
    struct __write_field _write_field;
    struct _field field;
    struct ___read __read;
    struct ___write __write;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___write_field__field__ignore_write {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __write_field _write_field;
    struct _field field;
    struct _ignore_write ignore_write;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___set_field___write_field__field__ignore_write {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __set_field _set_field;
    struct __write_field _write_field;
    struct _field field;
    struct _ignore_write ignore_write;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset__no_base_address_32 {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct _no_base_address_32 no_base_address_32;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___write_field__field__silent_constant {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __write_field _write_field;
    struct _field field;
    struct _silent_constant silent_constant;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___reg_read_as_field___reg_write_as_field__read_zero__write {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __reg_read_as_field _reg_read_as_field;
    struct __reg_write_as_field _reg_write_as_field;
    struct _read_zero read_zero;
    struct ___write __write;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset__unmapped {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct _unmapped unmapped;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset__register {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __register _register;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___reg_write_as_field__constant {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __reg_write_as_field _reg_write_as_field;
    struct _constant constant;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___reg_write_as_field__read_only_custom_write {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __reg_write_as_field _reg_write_as_field;
    struct _read_only_custom_write read_only_custom_write;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset__field {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct _field field;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___write_field__field__write {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __write_field _write_field;
    struct _field field;
    struct ___write __write;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset__base_address {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct _base_address base_address;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___write_field__field__write_1_clears {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __write_field _write_field;
    struct _field field;
    struct _write_1_clears write_1_clears;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___reg_read_as_field__read {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __reg_read_as_field _reg_read_as_field;
    struct ___read __read;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___reg_write_as_field__write {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __reg_write_as_field _reg_write_as_field;
    struct ___write __write;
};
struct ___implicit__init_val_hard_reset___init_val_soft_reset___reg_write_as_field__read_only {
    struct __init_val_hard_reset _init_val_hard_reset;
    struct __init_val_soft_reset _init_val_soft_reset;
    struct __reg_write_as_field _reg_write_as_field;
    struct _read_only read_only;
};


struct __devstruct_2odecam_pci_device_0HRESET {
    conf_object_t *_obj;
    conf_object_t *_cached_port_obj;
};
struct __devstruct_2odecam_pci_device_0SRESET {
    conf_object_t *_obj;
    conf_object_t *_cached_port_obj;
};
struct __devstruct_2odecam_pci_device_1expansion_rom_0rom {
    void const  *val;
};
struct __devstruct_2odecam_pci_device_1expansion_rom {
    conf_object_t *obj;
    char const *port;
    struct __devstruct_2odecam_pci_device_1expansion_rom_0rom rom;
};
struct __devstruct_2odecam_pci_device_2expansion_rom_size {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_0input {
    int len;
    char *val;
};
struct __devstruct_2odecam_pci_device_1int_attr {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_bus_1io_memory {
    void const  *val;
};
struct __devstruct_2odecam_pci_device_1pci_bus_1pci_bus {
    void const  *val;
};
struct __devstruct_2odecam_pci_device_1pci_bus_2pci_upstream_operation {
    void const  *val;
};
struct __devstruct_2odecam_pci_device_1pci_bus {
    conf_object_t *obj;
    char const *port;
    struct __devstruct_2odecam_pci_device_1pci_bus_1io_memory io_memory;
    struct __devstruct_2odecam_pci_device_1pci_bus_1pci_bus pci_bus;
    struct __devstruct_2odecam_pci_device_1pci_bus_2pci_upstream_operation pci_upstream_operation;
};
struct __devstruct_2odecam_pci_device_1pci_config_2base_address_0 {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2base_address_1 {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2base_address_2 {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2base_address_3 {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2base_address_4 {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2base_address_5 {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_0bist {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1bus_address {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2cache_line_size {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1capabilities_ptr {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2cardbus_cis_ptr {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1class_code {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_0command {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1device_id {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2expansion_rom_base {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1header_type {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1interrupt_line {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1interrupt_pin {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_0interrupts {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1latency_timer {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1max_lat {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1min_gnt {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1revision_id {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_0status {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1subsystem_id {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_2subsystem_vendor_id {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config_1vendor_id {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_1pci_config {
    conf_object_t *_obj;
    _callback_vect_t _after_read_callbacks;
    _callback_vect_t _after_write_callbacks;
    _callback_vect_t _before_read_callbacks;
    _callback_vect_t _before_write_callbacks;
    conf_object_t *_cached_bank_obj;
    _connection_vect_t _connections;
    int _num_mapped_regs;
    _register *_reginfo_cache;
    uint64 _reginfo_cache_size;
    _register *_sorted_regs;
    struct __devstruct_2odecam_pci_device_1pci_config_2base_address_0 base_address_0;
    struct __devstruct_2odecam_pci_device_1pci_config_2base_address_1 base_address_1;
    struct __devstruct_2odecam_pci_device_1pci_config_2base_address_2 base_address_2;
    struct __devstruct_2odecam_pci_device_1pci_config_2base_address_3 base_address_3;
    struct __devstruct_2odecam_pci_device_1pci_config_2base_address_4 base_address_4;
    struct __devstruct_2odecam_pci_device_1pci_config_2base_address_5 base_address_5;
    struct __devstruct_2odecam_pci_device_1pci_config_0bist bist;
    struct __devstruct_2odecam_pci_device_1pci_config_1bus_address bus_address;
    struct __devstruct_2odecam_pci_device_1pci_config_2cache_line_size cache_line_size;
    struct __devstruct_2odecam_pci_device_1pci_config_1capabilities_ptr capabilities_ptr;
    struct __devstruct_2odecam_pci_device_1pci_config_2cardbus_cis_ptr cardbus_cis_ptr;
    struct __devstruct_2odecam_pci_device_1pci_config_1class_code class_code;
    struct __devstruct_2odecam_pci_device_1pci_config_0command command;
    struct __devstruct_2odecam_pci_device_1pci_config_1device_id device_id;
    struct __devstruct_2odecam_pci_device_1pci_config_2expansion_rom_base expansion_rom_base;
    struct __devstruct_2odecam_pci_device_1pci_config_1header_type header_type;
    struct __devstruct_2odecam_pci_device_1pci_config_1interrupt_line interrupt_line;
    struct __devstruct_2odecam_pci_device_1pci_config_1interrupt_pin interrupt_pin;
    struct __devstruct_2odecam_pci_device_1pci_config_0interrupts interrupts;
    struct __devstruct_2odecam_pci_device_1pci_config_1latency_timer latency_timer;
    struct __devstruct_2odecam_pci_device_1pci_config_1max_lat max_lat;
    struct __devstruct_2odecam_pci_device_1pci_config_1min_gnt min_gnt;
    struct __devstruct_2odecam_pci_device_1pci_config_1revision_id revision_id;
    struct __devstruct_2odecam_pci_device_1pci_config_0status status;
    struct __devstruct_2odecam_pci_device_1pci_config_1subsystem_id subsystem_id;
    struct __devstruct_2odecam_pci_device_1pci_config_2subsystem_vendor_id subsystem_vendor_id;
    struct __devstruct_2odecam_pci_device_1pci_config_1vendor_id vendor_id;
};
struct __devstruct_2odecam_pci_device_0regs_0buffer {
    uint64 val[0x100LL];
};
struct __devstruct_2odecam_pci_device_0regs_0cmd {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_0regs_1device_state {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_0regs_1filter_blacknwhite {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_0regs_1filter_blur {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_0regs_1filter_negative {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_0regs_1filter_vintage {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_0regs_0version {
    uint64 val;
};
struct __devstruct_2odecam_pci_device_0regs {
    conf_object_t *_obj;
    _callback_vect_t _after_read_callbacks;
    _callback_vect_t _after_write_callbacks;
    _callback_vect_t _before_read_callbacks;
    _callback_vect_t _before_write_callbacks;
    conf_object_t *_cached_bank_obj;
    _connection_vect_t _connections;
    int _num_mapped_regs;
    _register *_reginfo_cache;
    uint64 _reginfo_cache_size;
    _register *_sorted_regs;
    struct __devstruct_2odecam_pci_device_0regs_0buffer buffer;
    struct __devstruct_2odecam_pci_device_0regs_0cmd cmd;
    struct __devstruct_2odecam_pci_device_0regs_1device_state device_state;
    struct __devstruct_2odecam_pci_device_0regs_1filter_blacknwhite filter_blacknwhite;
    struct __devstruct_2odecam_pci_device_0regs_1filter_blur filter_blur;
    struct __devstruct_2odecam_pci_device_0regs_1filter_negative filter_negative;
    struct __devstruct_2odecam_pci_device_0regs_1filter_vintage filter_vintage;
    struct __devstruct_2odecam_pci_device_0regs_0version version;
};
struct odecam_pci_device {
    conf_object_t obj;
    uint8 static1_log_level;
    uint8 static2_log_level;
    uint8 static3_log_level;
    uint8 static4_log_level;
    uint8 static5_log_level;
    uint8 static6_log_level;
    uint8 static7_log_level;
    uint8 static8_log_level;
    uint8 static9_log_level;
    uint8 static10_log_level;
    dml_qname_cache_t _qname_cache;
    bool _has_state_callbacks;
    bool _issuing_state_callbacks;
    ht_int_table_t _subsequent_log_ht;
    uint32 _tlp_prefix;
    FILE *file;
    struct __devstruct_2odecam_pci_device_0HRESET HRESET;
    struct __devstruct_2odecam_pci_device_0SRESET SRESET;
    struct __devstruct_2odecam_pci_device_1expansion_rom expansion_rom;
    struct __devstruct_2odecam_pci_device_2expansion_rom_size expansion_rom_size;
    struct __devstruct_2odecam_pci_device_0input input;
    struct __devstruct_2odecam_pci_device_1int_attr int_attr;
    struct __devstruct_2odecam_pci_device_1pci_bus pci_bus;
    struct __devstruct_2odecam_pci_device_1pci_config pci_config;
    struct __devstruct_2odecam_pci_device_0regs regs;
};
typedef enum odecam_pci_device_log_group {
    _dml_loggroup_PCI_config = 1,
    _dml_loggroup_PCI_DMA = 2,
    _dml_loggroup_PCI_IRQ = 4,
    _dml_loggroup_Register_Read = 8,
    _dml_loggroup_Register_Write = 16,
} odecam_pci_device_log_group_t;

void hard_reset_odecam_pci_device(odecam_pci_device_t *_obj);
void soft_reset_odecam_pci_device(odecam_pci_device_t *_obj);

#endif /* not ODECAM_PCI_DEVICE_DML_H */
